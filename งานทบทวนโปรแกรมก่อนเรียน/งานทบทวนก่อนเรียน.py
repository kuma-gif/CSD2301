# -*- coding: utf-8 -*-
"""งานทบทวนก่อนเรียน.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1InpFGZTNhJ94X1Xf3W4wCMLJT0hUKqVY
"""

numeric1 = 5
print(numeric1)
print(type(numeric1))

numeric2 = -3
print(numeric2)
print(type(numeric2))

numeric3 = 0
print(numeric3)
print(type(numeric3))

numeric4 = int(input('Please insert integer: '))
print(numeric4)
print(type(numeric4))

numeric1 = 5.0
print(numeric1)
print(type(numeric1))

numeric2 = -3.1
print(numeric2)
print(type(numeric2))

numeric3 = 0.0
print(numeric3)
print(type(numeric3))

numeric4 = float(input('Please insert floating number: '))
print(numeric4)
print(type(numeric4))

int1 = int(input('Please insert int1: '))
int2 = int(input('Please insert int2: '))
print('int1:', int1, type(int1))
print('int2:', int2, type(int2))
a = int1 + int2
print('sum:', a, type(a))
b = int1 - int2
print('difference:', b, type(b))
c = int1*int2
print('product:', c, type(c))



int1 = int(input('Please insert int1: '))
float1 = float(input('Please insert float1: '))
print('int1:', int1, type(int1))
print('float1:', float1, type(float1))
a = int1 + float1
print('sum:', a, type(a))
b = int1 - float1
print('difference:', b, type(b))
c = int1*float1
print('product:', c, type(c))
d = int1/float1
print('quotient:', d, type(d))

float1 = float(input('Please insert float1: '))
float2 = float(input('Please insert float2: '))
print('float1:', float1, type(float1))
print('float2:', float2, type(float2))
a = float1 + float2
print('sum', a, type(a))
b = float1 - float2
print('difference', b, type(b))
c = float1*float2
print('product', c, type(c))
d = float1/float2
print('quotient', d, type(d))

int1 = int(input('Please insert int1: '))
float1 = float(input('Please insert float1: '))
print('int1:', int1, type(int1))
print('float1:', float1, type(float1))
a = int1 + float1
print('sum:', a, type(a))
b = int1 - float1
print('difference:', b, type(b))
c = int1*float1
print('product:', c, type(c))
d = int1/float1
print('quotient:', d, type(d))

logic1 = True
print(logic1)
print(type(logic1))

logic2 = False
print(logic2)
print(type(logic2))

logic1 = True
logic2 = False
print((logic1 and logic2))

logic1 = True
logic2 = False
print((logic1 or logic2))

complex1 = 1 + 2j
print(complex1)
print(type(complex1))

complex1 = 1 + 2j
print(complex1.real)

complex1 = 1 + 2j
print(complex1.imag)

string1 = 'Python'
print(string1)
print(type(string1))

string1 = 'Python'
print(string1[0])

string1 = 'Python'
print(string1[1])

string1 = 'Python'
print(string1[-1])

string1 = 'Python'
print(string1[-2])

string1 = 'Python'
print(string1[2])

string1 = 'Python'
print(string1[-4])

string1 = 'Python'
print(string1[-4:-1])

string1 = 'Python'
print(string1[-6:5])

string1 = 'Python'
print(string1[:5])

string1 = 'Python'
print(string1[1:4])

sentence = input('Please insert sentence: ')
print(sentence.split(' '))

string1 = input('Please insert string1: ')
string2 = string1.replace('a', 'A')
print(string2)

string1 = input('Please insert string1: ')
print(string1.replace('a', 'A'))

string1 = input('Please insert string1: ')
print('a' in string1)

str1 = input('Please insert str1: ')
str2 = input('Please insert str2: ')
print(str1 + str2)

list1 = [0, 1, 2, 'a', 'b', 'c']
print(list1)
print(type(list1))

list1 = [0, 1, 2, 'a', 'b', 'c']
print(list1[2])

list1 = [0, 1, 2, 'a', 'b', 'c']
print(list1[1:-1])

list1 = [0, 1, 2, 'a', 'b', 'c']
print(list1[2:4])

list1 = [0, 1, 2, 'a', 'b', 'c']
print(list1[-5:5])

list2 = ['ant', 'bird', 'cat', 'dog', 'eagle']
list2[3] = 'duck'
print(list2)

list2 = ['ant', 'bird', 'cat', 'dog', 'eagle']
list2[-5] = 'ape'
print(list2)

list2 = ['ant', 'bird', 'cat', 'dog', 'eagle']
list2.append('fish')
print(list2)

list2 = []
str1 = input('Please insert first element: ')
str2 = input('Please insert second element: ')
str3 = input('Please insert third element: ')
list2.append(str1)
list2.append(str2)
list2.append(str3)
print(list2)

list3 = ['apple', 'banana', 'cherry', 'eggfruit']
list3.insert(-1, 'kiwi')
print(list3)

list3 = ['apple', 'cherry', 'eggfruit']
list3.insert(1, 'banana')
print(list3)

list4 = [0, 4, 2, 3, 1]
list4.sort()
print(list4)

list4 = [0, 4, 2, 3, 1]
list4.sort(reverse=True)
print(list4)

list4 = [0, 4, 2, 3, 1]
sorted_list4 = sorted(list4)
print(sorted_list4)

list1 = [1, 2, 3, 1, 2, 3]
list1.remove(1)
print(list1)

a = 0  # ตัวแปรเก็บจำนวนที่หารด้วย 3 ลงตัว

# วนลูปเช็คตัวเลขตั้งแต่ 1 ถึง 10000
for i in range(1, 10001):
  # ตรวจสอบว่าจำนวนนั้นหารด้วย 3 ลงตัวหรือไม่
  if i % 3 == 0:
    # เพิ่มจำนวนที่หารด้วย 3 ลงตัว
    a += 1

# แสดงผลลัพธ์
print("จำนวนที่หารด้วย 3 ลงตัวระหว่าง 1 ถึง 10000 มี", a, "จำนวน")

a = 0  # ตัวแปรเก็บจำนวนที่หารด้วย 5 ลงตัว

# วนลูปเช็คตัวเลขตั้งแต่ 1 ถึง 10000
for i in range(1, 10001):
  # ตรวจสอบว่าจำนวนนั้นหารด้วย 5 ลงตัวหรือไม่
  if i % 5 == 0:
    # เพิ่มจำนวนที่หารด้วย 5 ลงตัว
    a += 1

# แสดงผลลัพธ์
print("จำนวนที่หารด้วย 5 ลงตัวระหว่าง 1 ถึง 10000 มี", a, "จำนวน")

value = 0  # ตัวแปรเก็บจำนวนที่หารด้วย 3 และ 5 ลงตัว

# วนลูปเช็คตัวเลขตั้งแต่ 1 ถึง 10000
for i in range(1, 10001):
  # ตรวจสอบว่าจำนวนนั้นหารด้วย 3 และ 5 ลงตัวหรือไม่
  if ( i % 3 == 0) and (i % 5 == 0): # Use 'i' instead of 'จำนวน' here
    # เพิ่มจำนวนที่หารด้วย 3 และ 5 ลงตัว
    value += 1

# แสดงผลลัพธ์
print("จำนวนที่หารด้วย 3 และ 5 ลงตัวระหว่าง 1 ถึง 10000 มี", value, "จำนวน")

# ฟังก์ชั่นเพื่อหาจำนวนที่หารด้วย 3 หรือ 5 ลงตัว
def count_numbers_divisible_by_3_or_5():
    count = 0  # ตัวแปรเพื่อเก็บจำนวนที่หารด้วย 3 หรือ 5 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0 or i % 5 == 0:  # ตรวจสอบว่าหารด้วย 3 หรือ 5 ลงตัว
            count += 1  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้ง
    return count  # คืนค่าจำนวนที่นับได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = count_numbers_divisible_by_3_or_5()
print(f"จำนวนที่หารด้วย 3 หรือ 5 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result} จำนวน")

a = 0  # ตัวแปรเก็บจำนวนที่หารด้วย 3, 5 และ 7 ลงตัว

# วนลูปเช็คตัวเลขตั้งแต่ 1 ถึง 10000
for จำนวน in range(1, 10001):
  # ตรวจสอบว่าจำนวนนั้นหารด้วย 3, 5 และ 7 ลงตัวหรือไม่
  if (จำนวน % 3 == 0) and (จำนวน % 5 == 0) and (จำนวน % 7 == 0):
    # เพิ่มจำนวนที่หารด้วย 3, 5 และ 7 ลงตัว
    a += 1

# แสดงผลลัพธ์
print("จำนวนที่หารด้วย 3, 5 และ 7 ลงตัวระหว่าง 1 ถึง 10000 มี", a, "จำนวน")

# ฟังก์ชั่นเพื่อหาจำนวนที่หารด้วย 3, 5 หรือ 7 ลงตัว
def count_numbers_divisible_by_3_5_or_7():
    count = 0  # ตัวแปรเพื่อเก็บจำนวนที่หารด้วย 3, 5 หรือ 7 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:  # ตรวจสอบว่าหารด้วย 3, 5 หรือ 7 ลงตัว
            count += 1  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้ง
    return count  # คืนค่าจำนวนที่นับได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = count_numbers_divisible_by_3_5_or_7()
print(f"จำนวนที่หารด้วย 3, 5 หรือ 7 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result} จำนวน")

# ฟังก์ชั่นเพื่อหาผลรวมของจำนวนที่หารด้วย 3 ลงตัว
def sum_numbers_divisible_by_3():
    total_sum = 0  # ตัวแปรเพื่อเก็บผลรวมของจำนวนที่หารด้วย 3 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0:  # ตรวจสอบว่าหารด้วย 3 ลงตัว
            total_sum += i  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้งนั้นลงในผลรวม
    return total_sum  # คืนค่าผลรวมที่ได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = sum_numbers_divisible_by_3()
print(f"ผลรวมของจำนวนที่หารด้วย 3 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result}")

# ฟังก์ชั่นเพื่อหาผลรวมของจำนวนที่หารด้วย 5 ลงตัว
def sum_numbers_divisible_by_5():
    total_sum = 0  # ตัวแปรเพื่อเก็บผลรวมของจำนวนที่หารด้วย 5 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 5 == 0:  # ตรวจสอบว่าหารด้วย 5 ลงตัว
            total_sum += i  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้งนั้นลงในผลรวม
    return total_sum  # คืนค่าผลรวมที่ได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = sum_numbers_divisible_by_5()
print(f"ผลรวมของจำนวนที่หารด้วย 5 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result}")

# ฟังก์ชั่นเพื่อหาผลรวมของจำนวนที่หารด้วย 3 และ 5 ลงตัว
def sum_numbers_divisible_by_3_and_5():
    total_sum = 0  # ตัวแปรเพื่อเก็บผลรวมของจำนวนที่หารด้วย 3 และ 5 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0 and i % 5 == 0:  # ตรวจสอบว่าหารด้วย 3 และ 5 ลงตัว
            total_sum += i  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้งนั้นลงในผลรวม
    return total_sum  # คืนค่าผลรวมที่ได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = sum_numbers_divisible_by_3_and_5()
print(f"ผลรวมของจำนวนที่หารด้วย 3 และ 5 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result}")

# ฟังก์ชั่นเพื่อหาผลรวมของจำนวนที่หารด้วย 3 หรือ 5 ลงตัว
def sum_numbers_divisible_by_3_or_5():
    total_sum = 0  # ตัวแปรเพื่อเก็บผลรวมของจำนวนที่หารด้วย 3 หรือ 5 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0 or i % 5 == 0:  # ตรวจสอบว่าหารด้วย 3 หรือ 5 ลงตัว
            total_sum += i  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้งนั้นลงในผลรวม
    return total_sum  # คืนค่าผลรวมที่ได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = sum_numbers_divisible_by_3_or_5()
print(f"ผลรวมของจำนวนที่หารด้วย 3 หรือ 5 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result}")

# ฟังก์ชั่นเพื่อหาผลรวมของจำนวนที่หารด้วย 3, 5 และ 7 ลงตัว
def sum_numbers_divisible_by_3_5_and_7():
    total_sum = 0  # ตัวแปรเพื่อเก็บผลรวมของจำนวนที่หารด้วย 3, 5 และ 7 ลงตัว
    for i in range(1, 10001):  # วนลูปตั้งแต่ 1 ถึง 10000
        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0:  # ตรวจสอบว่าหารด้วย 3, 5 และ 7 ลงตัว
            total_sum += i  # ถ้าหารลงตัว ให้เพิ่มจำนวนครั้งนั้นลงในผลรวม
    return total_sum  # คืนค่าผลรวมที่ได้

# เรียกใช้ฟังก์ชั่นและแสดงผลลัพธ์
result = sum_numbers_divisible_by_3_5_and_7()
print(f"ผลรวมของจำนวนที่หารด้วย 3, 5 และ 7 ลงตัวที่อยู่ระหว่าง 1 และ 10000 มีทั้งหมด {result}")

def sum_divisible_by_357():
    total_sum = 0
    for number in range(1, 10001):
        if number % 3 == 0 or number % 5 == 0 or number % 7 == 0:
            total_sum += number
    return total_sum

result = sum_divisible_by_357()
print(f"The sum of numbers divisible by 3, 5, or 7 between 1 and 10000 is: {result}")